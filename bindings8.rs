/* automatically generated by rust-bindgen 0.55.1 */

pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _SETJMP_H: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const BITS_IN_JSAMPLE: u32 = 8;
pub const MAX_COMPONENTS: u32 = 10;
pub const MAXJSAMPLE: u32 = 255;
pub const CENTERJSAMPLE: u32 = 128;
pub const JPEG_MAX_DIMENSION: u32 = 65500;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const JPEG_LIB_VERSION: u32 = 62;
pub const DCTSIZE: u32 = 8;
pub const DCTSIZE2: u32 = 64;
pub const NUM_QUANT_TBLS: u32 = 4;
pub const NUM_HUFF_TBLS: u32 = 4;
pub const NUM_ARITH_TBLS: u32 = 16;
pub const MAX_COMPS_IN_SCAN: u32 = 4;
pub const MAX_SAMP_FACTOR: u32 = 4;
pub const C_MAX_DATA_UNITS_IN_MCU: u32 = 10;
pub const D_MAX_DATA_UNITS_IN_MCU: u32 = 10;
pub const JMSG_LENGTH_MAX: u32 = 200;
pub const JMSG_STR_PARM_MAX: u32 = 80;
pub const JPOOL_PERMANENT: u32 = 0;
pub const JPOOL_IMAGE: u32 = 1;
pub const JPOOL_NUMPOOLS: u32 = 2;
pub const JPEG_SUSPENDED: u32 = 0;
pub const JPEG_HEADER_OK: u32 = 1;
pub const JPEG_HEADER_TABLES_ONLY: u32 = 2;
pub const JPEG_REACHED_SOS: u32 = 1;
pub const JPEG_REACHED_EOI: u32 = 2;
pub const JPEG_ROW_COMPLETED: u32 = 3;
pub const JPEG_SCAN_COMPLETED: u32 = 4;
pub const JPEG_RST0: u32 = 208;
pub const JPEG_EOI: u32 = 217;
pub const JPEG_APP0: u32 = 224;
pub const JPEG_COM: u32 = 254;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(
        arg1: *mut _IO_FILE,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __s: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__jmpbuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__mask_was_saved as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__saved_mask as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
pub type JSAMPLE = ::std::os::raw::c_uchar;
pub type JCOEF = ::std::os::raw::c_short;
pub type JDIFF = ::std::os::raw::c_int;
pub type JOCTET = ::std::os::raw::c_uchar;
pub type UINT8 = ::std::os::raw::c_uchar;
pub type UINT16 = ::std::os::raw::c_ushort;
pub type INT16 = ::std::os::raw::c_short;
pub type INT32 = ::std::os::raw::c_int;
pub type JDIMENSION = ::std::os::raw::c_uint;
pub type boolean = ::std::os::raw::c_int;
pub type JSAMPROW = *mut JSAMPLE;
pub type JSAMPARRAY = *mut JSAMPROW;
pub type JSAMPIMAGE = *mut JSAMPARRAY;
pub type JBLOCK = [JCOEF; 64usize];
pub type JBLOCKROW = *mut JBLOCK;
pub type JBLOCKARRAY = *mut JBLOCKROW;
pub type JBLOCKIMAGE = *mut JBLOCKARRAY;
pub type JCOEFPTR = *mut JCOEF;
pub type JDIFFROW = *mut JDIFF;
pub type JDIFFARRAY = *mut JDIFFROW;
pub type JDIFFIMAGE = *mut JDIFFARRAY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JQUANT_TBL {
    pub quantval: [UINT16; 64usize],
    pub sent_table: boolean,
}
#[test]
fn bindgen_test_layout_JQUANT_TBL() {
    assert_eq!(
        ::std::mem::size_of::<JQUANT_TBL>(),
        132usize,
        concat!("Size of: ", stringify!(JQUANT_TBL))
    );
    assert_eq!(
        ::std::mem::align_of::<JQUANT_TBL>(),
        4usize,
        concat!("Alignment of ", stringify!(JQUANT_TBL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JQUANT_TBL>())).quantval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JQUANT_TBL),
            "::",
            stringify!(quantval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JQUANT_TBL>())).sent_table as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(JQUANT_TBL),
            "::",
            stringify!(sent_table)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JHUFF_TBL {
    pub bits: [UINT8; 17usize],
    pub huffval: [UINT8; 256usize],
    pub sent_table: boolean,
}
#[test]
fn bindgen_test_layout_JHUFF_TBL() {
    assert_eq!(
        ::std::mem::size_of::<JHUFF_TBL>(),
        280usize,
        concat!("Size of: ", stringify!(JHUFF_TBL))
    );
    assert_eq!(
        ::std::mem::align_of::<JHUFF_TBL>(),
        4usize,
        concat!("Alignment of ", stringify!(JHUFF_TBL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JHUFF_TBL>())).bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JHUFF_TBL),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JHUFF_TBL>())).huffval as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(JHUFF_TBL),
            "::",
            stringify!(huffval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JHUFF_TBL>())).sent_table as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(JHUFF_TBL),
            "::",
            stringify!(sent_table)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_component_info {
    pub component_id: ::std::os::raw::c_int,
    pub component_index: ::std::os::raw::c_int,
    pub h_samp_factor: ::std::os::raw::c_int,
    pub v_samp_factor: ::std::os::raw::c_int,
    pub quant_tbl_no: ::std::os::raw::c_int,
    pub dc_tbl_no: ::std::os::raw::c_int,
    pub ac_tbl_no: ::std::os::raw::c_int,
    pub width_in_data_units: JDIMENSION,
    pub height_in_data_units: JDIMENSION,
    pub codec_data_unit: ::std::os::raw::c_int,
    pub downsampled_width: JDIMENSION,
    pub downsampled_height: JDIMENSION,
    pub component_needed: boolean,
    pub MCU_width: ::std::os::raw::c_int,
    pub MCU_height: ::std::os::raw::c_int,
    pub MCU_data_units: ::std::os::raw::c_int,
    pub MCU_sample_width: ::std::os::raw::c_int,
    pub last_col_width: ::std::os::raw::c_int,
    pub last_row_height: ::std::os::raw::c_int,
    pub quant_table: *mut JQUANT_TBL,
    pub dct_table: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_jpeg_component_info() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_component_info>(),
        96usize,
        concat!("Size of: ", stringify!(jpeg_component_info))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_component_info>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_component_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).component_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(component_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).component_index as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(component_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).h_samp_factor as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(h_samp_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).v_samp_factor as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(v_samp_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).quant_tbl_no as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(quant_tbl_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_component_info>())).dc_tbl_no as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(dc_tbl_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_component_info>())).ac_tbl_no as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(ac_tbl_no)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).width_in_data_units as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(width_in_data_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).height_in_data_units as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(height_in_data_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).codec_data_unit as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(codec_data_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).downsampled_width as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(downsampled_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).downsampled_height as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(downsampled_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).component_needed as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(component_needed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_component_info>())).MCU_width as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(MCU_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_component_info>())).MCU_height as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(MCU_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).MCU_data_units as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(MCU_data_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).MCU_sample_width as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(MCU_sample_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).last_col_width as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(last_col_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).last_row_height as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(last_row_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_component_info>())).quant_table as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(quant_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_component_info>())).dct_table as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(dct_table)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_scan_info {
    pub comps_in_scan: ::std::os::raw::c_int,
    pub component_index: [::std::os::raw::c_int; 4usize],
    pub Ss: ::std::os::raw::c_int,
    pub Se: ::std::os::raw::c_int,
    pub Ah: ::std::os::raw::c_int,
    pub Al: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jpeg_scan_info() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_scan_info>(),
        36usize,
        concat!("Size of: ", stringify!(jpeg_scan_info))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_scan_info>(),
        4usize,
        concat!("Alignment of ", stringify!(jpeg_scan_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_scan_info>())).comps_in_scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(comps_in_scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_scan_info>())).component_index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(component_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_scan_info>())).Ss as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(Ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_scan_info>())).Se as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(Se)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_scan_info>())).Ah as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(Ah)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_scan_info>())).Al as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(Al)
        )
    );
}
pub type jpeg_saved_marker_ptr = *mut jpeg_marker_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_marker_struct {
    pub next: jpeg_saved_marker_ptr,
    pub marker: UINT8,
    pub original_length: ::std::os::raw::c_uint,
    pub data_length: ::std::os::raw::c_uint,
    pub data: *mut JOCTET,
}
#[test]
fn bindgen_test_layout_jpeg_marker_struct() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_marker_struct>(),
        32usize,
        concat!("Size of: ", stringify!(jpeg_marker_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_marker_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_marker_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_marker_struct>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_marker_struct>())).marker as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(marker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_marker_struct>())).original_length as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(original_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_marker_struct>())).data_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(data_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_marker_struct>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(data)
        )
    );
}
pub const J_CODEC_PROCESS_JPROC_SEQUENTIAL: J_CODEC_PROCESS = 0;
pub const J_CODEC_PROCESS_JPROC_PROGRESSIVE: J_CODEC_PROCESS = 1;
pub const J_CODEC_PROCESS_JPROC_LOSSLESS: J_CODEC_PROCESS = 2;
pub type J_CODEC_PROCESS = ::std::os::raw::c_uint;
pub const J_COLOR_SPACE_JCS_UNKNOWN: J_COLOR_SPACE = 0;
pub const J_COLOR_SPACE_JCS_GRAYSCALE: J_COLOR_SPACE = 1;
pub const J_COLOR_SPACE_JCS_RGB: J_COLOR_SPACE = 2;
pub const J_COLOR_SPACE_JCS_YCbCr: J_COLOR_SPACE = 3;
pub const J_COLOR_SPACE_JCS_CMYK: J_COLOR_SPACE = 4;
pub const J_COLOR_SPACE_JCS_YCCK: J_COLOR_SPACE = 5;
pub type J_COLOR_SPACE = ::std::os::raw::c_uint;
pub const J_DCT_METHOD_JDCT_ISLOW: J_DCT_METHOD = 0;
pub const J_DCT_METHOD_JDCT_IFAST: J_DCT_METHOD = 1;
pub const J_DCT_METHOD_JDCT_FLOAT: J_DCT_METHOD = 2;
pub type J_DCT_METHOD = ::std::os::raw::c_uint;
pub const J_DITHER_MODE_JDITHER_NONE: J_DITHER_MODE = 0;
pub const J_DITHER_MODE_JDITHER_ORDERED: J_DITHER_MODE = 1;
pub const J_DITHER_MODE_JDITHER_FS: J_DITHER_MODE = 2;
pub type J_DITHER_MODE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg8_common_struct {
    pub err: *mut jpeg8_error_mgr,
    pub mem: *mut jpeg8_memory_mgr,
    pub progress: *mut jpeg8_progress_mgr,
    pub client_data: *mut ::std::os::raw::c_void,
    pub is_decompressor: boolean,
    pub global_state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jpeg8_common_struct() {
    assert_eq!(
        ::std::mem::size_of::<jpeg8_common_struct>(),
        40usize,
        concat!("Size of: ", stringify!(jpeg8_common_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg8_common_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg8_common_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_common_struct>())).err as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_common_struct),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_common_struct>())).mem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_common_struct),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_common_struct>())).progress as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_common_struct),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_common_struct>())).client_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_common_struct),
            "::",
            stringify!(client_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_common_struct>())).is_decompressor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_common_struct),
            "::",
            stringify!(is_decompressor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_common_struct>())).global_state as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_common_struct),
            "::",
            stringify!(global_state)
        )
    );
}
pub type j_common_ptr = *mut jpeg8_common_struct;
pub type j_compress_ptr = *mut jpeg8_compress_struct;
pub type j_decompress_ptr = *mut jpeg8_decompress_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg8_compress_struct {
    pub err: *mut jpeg8_error_mgr,
    pub mem: *mut jpeg8_memory_mgr,
    pub progress: *mut jpeg8_progress_mgr,
    pub client_data: *mut ::std::os::raw::c_void,
    pub is_decompressor: boolean,
    pub global_state: ::std::os::raw::c_int,
    pub dest: *mut jpeg8_destination_mgr,
    pub image_width: JDIMENSION,
    pub image_height: JDIMENSION,
    pub input_components: ::std::os::raw::c_int,
    pub in_color_space: J_COLOR_SPACE,
    pub input_gamma: f64,
    pub lossless: boolean,
    pub data_precision: ::std::os::raw::c_int,
    pub num_components: ::std::os::raw::c_int,
    pub jpeg_color_space: J_COLOR_SPACE,
    pub comp_info: *mut jpeg_component_info,
    pub quant_tbl_ptrs: [*mut JQUANT_TBL; 4usize],
    pub dc_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub ac_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub arith_dc_L: [UINT8; 16usize],
    pub arith_dc_U: [UINT8; 16usize],
    pub arith_ac_K: [UINT8; 16usize],
    pub num_scans: ::std::os::raw::c_int,
    pub scan_info: *const jpeg_scan_info,
    pub raw_data_in: boolean,
    pub arith_code: boolean,
    pub optimize_coding: boolean,
    pub CCIR601_sampling: boolean,
    pub smoothing_factor: ::std::os::raw::c_int,
    pub dct_method: J_DCT_METHOD,
    pub restart_interval: ::std::os::raw::c_uint,
    pub restart_in_rows: ::std::os::raw::c_int,
    pub write_JFIF_header: boolean,
    pub JFIF_major_version: UINT8,
    pub JFIF_minor_version: UINT8,
    pub density_unit: UINT8,
    pub X_density: UINT16,
    pub Y_density: UINT16,
    pub write_Adobe_marker: boolean,
    pub next_scanline: JDIMENSION,
    pub data_unit: ::std::os::raw::c_int,
    pub process: J_CODEC_PROCESS,
    pub max_h_samp_factor: ::std::os::raw::c_int,
    pub max_v_samp_factor: ::std::os::raw::c_int,
    pub total_iMCU_rows: JDIMENSION,
    pub comps_in_scan: ::std::os::raw::c_int,
    pub cur_comp_info: [*mut jpeg_component_info; 4usize],
    pub MCUs_per_row: JDIMENSION,
    pub MCU_rows_in_scan: JDIMENSION,
    pub data_units_in_MCU: ::std::os::raw::c_int,
    pub MCU_membership: [::std::os::raw::c_int; 10usize],
    pub Ss: ::std::os::raw::c_int,
    pub Se: ::std::os::raw::c_int,
    pub Ah: ::std::os::raw::c_int,
    pub Al: ::std::os::raw::c_int,
    pub master: *mut jpeg_comp_master,
    pub main: *mut jpeg_c_main_controller,
    pub prep: *mut jpeg_c_prep_controller,
    pub codec: *mut jpeg_c_codec,
    pub marker: *mut jpeg_marker_writer,
    pub cconvert: *mut jpeg_color_converter,
    pub downsample: *mut jpeg_downsampler,
    pub script_space: *mut jpeg_scan_info,
    pub script_space_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jpeg8_compress_struct() {
    assert_eq!(
        ::std::mem::size_of::<jpeg8_compress_struct>(),
        512usize,
        concat!("Size of: ", stringify!(jpeg8_compress_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg8_compress_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg8_compress_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).err as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).mem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).progress as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).client_data as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(client_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).is_decompressor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(is_decompressor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).global_state as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(global_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).dest as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).image_width as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(image_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).image_height as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(image_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).input_components as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(input_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).in_color_space as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(in_color_space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).input_gamma as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(input_gamma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).lossless as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(lossless)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).data_precision as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(data_precision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).num_components as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(num_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).jpeg_color_space as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(jpeg_color_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).comp_info as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(comp_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).quant_tbl_ptrs as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(quant_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).dc_huff_tbl_ptrs as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(dc_huff_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).ac_huff_tbl_ptrs as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(ac_huff_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).arith_dc_L as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(arith_dc_L)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).arith_dc_U as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(arith_dc_U)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).arith_ac_K as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(arith_ac_K)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).num_scans as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(num_scans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).scan_info as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(scan_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).raw_data_in as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(raw_data_in)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).arith_code as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(arith_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).optimize_coding as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(optimize_coding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).CCIR601_sampling as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(CCIR601_sampling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).smoothing_factor as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(smoothing_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).dct_method as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(dct_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).restart_interval as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(restart_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).restart_in_rows as *const _ as usize
        },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(restart_in_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).write_JFIF_header as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(write_JFIF_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).JFIF_major_version as *const _
                as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(JFIF_major_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).JFIF_minor_version as *const _
                as usize
        },
        293usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(JFIF_minor_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).density_unit as *const _ as usize
        },
        294usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(density_unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).X_density as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(X_density)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).Y_density as *const _ as usize },
        298usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(Y_density)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).write_Adobe_marker as *const _
                as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(write_Adobe_marker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).next_scanline as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(next_scanline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).data_unit as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(data_unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).process as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(process)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).max_h_samp_factor as *const _ as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(max_h_samp_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).max_v_samp_factor as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(max_v_samp_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).total_iMCU_rows as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(total_iMCU_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).comps_in_scan as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(comps_in_scan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).cur_comp_info as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(cur_comp_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).MCUs_per_row as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(MCUs_per_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).MCU_rows_in_scan as *const _ as usize
        },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(MCU_rows_in_scan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).data_units_in_MCU as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(data_units_in_MCU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).MCU_membership as *const _ as usize
        },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(MCU_membership)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).Ss as *const _ as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(Ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).Se as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(Se)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).Ah as *const _ as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(Ah)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).Al as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(Al)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).master as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(master)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).main as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(main)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).prep as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(prep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).codec as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(codec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).marker as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(marker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_compress_struct>())).cconvert as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(cconvert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).downsample as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(downsample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).script_space as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(script_space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_compress_struct>())).script_space_size as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_compress_struct),
            "::",
            stringify!(script_space_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg8_decompress_struct {
    pub err: *mut jpeg8_error_mgr,
    pub mem: *mut jpeg8_memory_mgr,
    pub progress: *mut jpeg8_progress_mgr,
    pub client_data: *mut ::std::os::raw::c_void,
    pub is_decompressor: boolean,
    pub global_state: ::std::os::raw::c_int,
    pub src: *mut jpeg8_source_mgr,
    pub image_width: JDIMENSION,
    pub image_height: JDIMENSION,
    pub num_components: ::std::os::raw::c_int,
    pub jpeg_color_space: J_COLOR_SPACE,
    pub out_color_space: J_COLOR_SPACE,
    pub scale_num: ::std::os::raw::c_uint,
    pub scale_denom: ::std::os::raw::c_uint,
    pub output_gamma: f64,
    pub buffered_image: boolean,
    pub raw_data_out: boolean,
    pub dct_method: J_DCT_METHOD,
    pub do_fancy_upsampling: boolean,
    pub do_block_smoothing: boolean,
    pub quantize_colors: boolean,
    pub dither_mode: J_DITHER_MODE,
    pub two_pass_quantize: boolean,
    pub desired_number_of_colors: ::std::os::raw::c_int,
    pub enable_1pass_quant: boolean,
    pub enable_external_quant: boolean,
    pub enable_2pass_quant: boolean,
    pub output_width: JDIMENSION,
    pub output_height: JDIMENSION,
    pub out_color_components: ::std::os::raw::c_int,
    pub output_components: ::std::os::raw::c_int,
    pub rec_outbuf_height: ::std::os::raw::c_int,
    pub actual_number_of_colors: ::std::os::raw::c_int,
    pub colormap: JSAMPARRAY,
    pub output_scanline: JDIMENSION,
    pub input_scan_number: ::std::os::raw::c_int,
    pub input_iMCU_row: JDIMENSION,
    pub output_scan_number: ::std::os::raw::c_int,
    pub output_iMCU_row: JDIMENSION,
    pub coef_bits: *mut [::std::os::raw::c_int; 64usize],
    pub quant_tbl_ptrs: [*mut JQUANT_TBL; 4usize],
    pub dc_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub ac_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub data_precision: ::std::os::raw::c_int,
    pub comp_info: *mut jpeg_component_info,
    pub arith_code: boolean,
    pub arith_dc_L: [UINT8; 16usize],
    pub arith_dc_U: [UINT8; 16usize],
    pub arith_ac_K: [UINT8; 16usize],
    pub restart_interval: ::std::os::raw::c_uint,
    pub saw_JFIF_marker: boolean,
    pub JFIF_major_version: UINT8,
    pub JFIF_minor_version: UINT8,
    pub density_unit: UINT8,
    pub X_density: UINT16,
    pub Y_density: UINT16,
    pub saw_Adobe_marker: boolean,
    pub Adobe_transform: UINT8,
    pub CCIR601_sampling: boolean,
    pub marker_list: jpeg_saved_marker_ptr,
    pub data_unit: ::std::os::raw::c_int,
    pub process: J_CODEC_PROCESS,
    pub max_h_samp_factor: ::std::os::raw::c_int,
    pub max_v_samp_factor: ::std::os::raw::c_int,
    pub min_codec_data_unit: ::std::os::raw::c_int,
    pub total_iMCU_rows: JDIMENSION,
    pub sample_range_limit: *mut JSAMPLE,
    pub comps_in_scan: ::std::os::raw::c_int,
    pub cur_comp_info: [*mut jpeg_component_info; 4usize],
    pub MCUs_per_row: JDIMENSION,
    pub MCU_rows_in_scan: JDIMENSION,
    pub data_units_in_MCU: ::std::os::raw::c_int,
    pub MCU_membership: [::std::os::raw::c_int; 10usize],
    pub Ss: ::std::os::raw::c_int,
    pub Se: ::std::os::raw::c_int,
    pub Ah: ::std::os::raw::c_int,
    pub Al: ::std::os::raw::c_int,
    pub unread_marker: ::std::os::raw::c_int,
    pub master: *mut jpeg_decomp_master,
    pub main: *mut jpeg_d_main_controller,
    pub codec: *mut jpeg_d_codec,
    pub post: *mut jpeg_d_post_controller,
    pub inputctl: *mut jpeg_input_controller,
    pub marker: *mut jpeg_marker_reader,
    pub upsample: *mut jpeg_upsampler,
    pub cconvert: *mut jpeg_color_deconverter,
    pub cquantize: *mut jpeg_color_quantizer,
}
#[test]
fn bindgen_test_layout_jpeg8_decompress_struct() {
    assert_eq!(
        ::std::mem::size_of::<jpeg8_decompress_struct>(),
        616usize,
        concat!("Size of: ", stringify!(jpeg8_decompress_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg8_decompress_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg8_decompress_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_decompress_struct>())).err as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_decompress_struct>())).mem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).progress as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).client_data as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(client_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).is_decompressor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(is_decompressor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).global_state as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(global_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_decompress_struct>())).src as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).image_width as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(image_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).image_height as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(image_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).num_components as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(num_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).jpeg_color_space as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(jpeg_color_space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).out_color_space as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(out_color_space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).scale_num as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(scale_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).scale_denom as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(scale_denom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).output_gamma as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(output_gamma)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).buffered_image as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(buffered_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).raw_data_out as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(raw_data_out)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).dct_method as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(dct_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).do_fancy_upsampling as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(do_fancy_upsampling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).do_block_smoothing as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(do_block_smoothing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).quantize_colors as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(quantize_colors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).dither_mode as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(dither_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).two_pass_quantize as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(two_pass_quantize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).desired_number_of_colors as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(desired_number_of_colors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).enable_1pass_quant as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(enable_1pass_quant)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).enable_external_quant as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(enable_external_quant)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).enable_2pass_quant as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(enable_2pass_quant)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).output_width as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(output_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).output_height as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(output_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).out_color_components as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(out_color_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).output_components as *const _
                as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(output_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).rec_outbuf_height as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(rec_outbuf_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).actual_number_of_colors as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(actual_number_of_colors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).colormap as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(colormap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).output_scanline as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(output_scanline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).input_scan_number as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(input_scan_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).input_iMCU_row as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(input_iMCU_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).output_scan_number as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(output_scan_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).output_iMCU_row as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(output_iMCU_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).coef_bits as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(coef_bits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).quant_tbl_ptrs as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(quant_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).dc_huff_tbl_ptrs as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(dc_huff_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).ac_huff_tbl_ptrs as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(ac_huff_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).data_precision as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(data_precision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).comp_info as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(comp_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).arith_code as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(arith_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).arith_dc_L as *const _ as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(arith_dc_L)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).arith_dc_U as *const _ as usize
        },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(arith_dc_U)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).arith_ac_K as *const _ as usize
        },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(arith_ac_K)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).restart_interval as *const _
                as usize
        },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(restart_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).saw_JFIF_marker as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(saw_JFIF_marker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).JFIF_major_version as *const _
                as usize
        },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(JFIF_major_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).JFIF_minor_version as *const _
                as usize
        },
        373usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(JFIF_minor_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).density_unit as *const _ as usize
        },
        374usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(density_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).X_density as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(X_density)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).Y_density as *const _ as usize
        },
        378usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(Y_density)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).saw_Adobe_marker as *const _
                as usize
        },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(saw_Adobe_marker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).Adobe_transform as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(Adobe_transform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).CCIR601_sampling as *const _
                as usize
        },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(CCIR601_sampling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).marker_list as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(marker_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).data_unit as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(data_unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_decompress_struct>())).process as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(process)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).max_h_samp_factor as *const _
                as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(max_h_samp_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).max_v_samp_factor as *const _
                as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(max_v_samp_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).min_codec_data_unit as *const _
                as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(min_codec_data_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).total_iMCU_rows as *const _ as usize
        },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(total_iMCU_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).sample_range_limit as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(sample_range_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).comps_in_scan as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(comps_in_scan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).cur_comp_info as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(cur_comp_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).MCUs_per_row as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(MCUs_per_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).MCU_rows_in_scan as *const _
                as usize
        },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(MCU_rows_in_scan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).data_units_in_MCU as *const _
                as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(data_units_in_MCU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).MCU_membership as *const _ as usize
        },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(MCU_membership)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_decompress_struct>())).Ss as *const _ as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(Ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_decompress_struct>())).Se as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(Se)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_decompress_struct>())).Ah as *const _ as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(Ah)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_decompress_struct>())).Al as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(Al)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).unread_marker as *const _ as usize
        },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(unread_marker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_decompress_struct>())).master as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(master)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_decompress_struct>())).main as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(main)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_decompress_struct>())).codec as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(codec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_decompress_struct>())).post as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(post)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).inputctl as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(inputctl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_decompress_struct>())).marker as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(marker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).upsample as *const _ as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(upsample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).cconvert as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(cconvert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_decompress_struct>())).cquantize as *const _ as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_decompress_struct),
            "::",
            stringify!(cquantize)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct jpeg8_error_mgr {
    pub error_exit: ::std::option::Option<unsafe extern "C" fn(cinfo: j_common_ptr)>,
    pub emit_message: ::std::option::Option<
        unsafe extern "C" fn(cinfo: j_common_ptr, msg_level: ::std::os::raw::c_int),
    >,
    pub output_message: ::std::option::Option<unsafe extern "C" fn(cinfo: j_common_ptr)>,
    pub format_message: ::std::option::Option<
        unsafe extern "C" fn(cinfo: j_common_ptr, buffer: *mut ::std::os::raw::c_char),
    >,
    pub reset_error_mgr: ::std::option::Option<unsafe extern "C" fn(cinfo: j_common_ptr)>,
    pub msg_code: ::std::os::raw::c_int,
    pub msg_parm: jpeg8_error_mgr__bindgen_ty_1,
    pub trace_level: ::std::os::raw::c_int,
    pub num_warnings: ::std::os::raw::c_long,
    pub jpeg_message_table: *const *const ::std::os::raw::c_char,
    pub last_jpeg_message: ::std::os::raw::c_int,
    pub addon_message_table: *const *const ::std::os::raw::c_char,
    pub first_addon_message: ::std::os::raw::c_int,
    pub last_addon_message: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union jpeg8_error_mgr__bindgen_ty_1 {
    pub i: [::std::os::raw::c_int; 8usize],
    pub s: [::std::os::raw::c_char; 80usize],
    _bindgen_union_align: [u32; 20usize],
}
#[test]
fn bindgen_test_layout_jpeg8_error_mgr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<jpeg8_error_mgr__bindgen_ty_1>(),
        80usize,
        concat!("Size of: ", stringify!(jpeg8_error_mgr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg8_error_mgr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(jpeg8_error_mgr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_error_mgr__bindgen_ty_1>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_error_mgr__bindgen_ty_1>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
}
#[test]
fn bindgen_test_layout_jpeg8_error_mgr() {
    assert_eq!(
        ::std::mem::size_of::<jpeg8_error_mgr>(),
        168usize,
        concat!("Size of: ", stringify!(jpeg8_error_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg8_error_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg8_error_mgr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_error_mgr>())).error_exit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(error_exit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_error_mgr>())).emit_message as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(emit_message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_error_mgr>())).output_message as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(output_message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_error_mgr>())).format_message as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(format_message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_error_mgr>())).reset_error_mgr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(reset_error_mgr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_error_mgr>())).msg_code as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(msg_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_error_mgr>())).msg_parm as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(msg_parm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_error_mgr>())).trace_level as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(trace_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_error_mgr>())).num_warnings as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(num_warnings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_error_mgr>())).jpeg_message_table as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(jpeg_message_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_error_mgr>())).last_jpeg_message as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(last_jpeg_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_error_mgr>())).addon_message_table as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(addon_message_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_error_mgr>())).first_addon_message as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(first_addon_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_error_mgr>())).last_addon_message as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_error_mgr),
            "::",
            stringify!(last_addon_message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg8_progress_mgr {
    pub progress_monitor: ::std::option::Option<unsafe extern "C" fn(cinfo: j_common_ptr)>,
    pub pass_counter: ::std::os::raw::c_long,
    pub pass_limit: ::std::os::raw::c_long,
    pub completed_passes: ::std::os::raw::c_int,
    pub total_passes: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jpeg8_progress_mgr() {
    assert_eq!(
        ::std::mem::size_of::<jpeg8_progress_mgr>(),
        32usize,
        concat!("Size of: ", stringify!(jpeg8_progress_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg8_progress_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg8_progress_mgr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_progress_mgr>())).progress_monitor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_progress_mgr),
            "::",
            stringify!(progress_monitor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_progress_mgr>())).pass_counter as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_progress_mgr),
            "::",
            stringify!(pass_counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_progress_mgr>())).pass_limit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_progress_mgr),
            "::",
            stringify!(pass_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_progress_mgr>())).completed_passes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_progress_mgr),
            "::",
            stringify!(completed_passes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_progress_mgr>())).total_passes as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_progress_mgr),
            "::",
            stringify!(total_passes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg8_destination_mgr {
    pub next_output_byte: *mut JOCTET,
    pub free_in_buffer: size_t,
    pub init_destination: ::std::option::Option<unsafe extern "C" fn(cinfo: j_compress_ptr)>,
    pub empty_output_buffer:
        ::std::option::Option<unsafe extern "C" fn(cinfo: j_compress_ptr) -> boolean>,
    pub term_destination: ::std::option::Option<unsafe extern "C" fn(cinfo: j_compress_ptr)>,
}
#[test]
fn bindgen_test_layout_jpeg8_destination_mgr() {
    assert_eq!(
        ::std::mem::size_of::<jpeg8_destination_mgr>(),
        40usize,
        concat!("Size of: ", stringify!(jpeg8_destination_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg8_destination_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg8_destination_mgr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_destination_mgr>())).next_output_byte as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_destination_mgr),
            "::",
            stringify!(next_output_byte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_destination_mgr>())).free_in_buffer as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_destination_mgr),
            "::",
            stringify!(free_in_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_destination_mgr>())).init_destination as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_destination_mgr),
            "::",
            stringify!(init_destination)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_destination_mgr>())).empty_output_buffer as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_destination_mgr),
            "::",
            stringify!(empty_output_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_destination_mgr>())).term_destination as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_destination_mgr),
            "::",
            stringify!(term_destination)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg8_source_mgr {
    pub next_input_byte: *const JOCTET,
    pub bytes_in_buffer: size_t,
    pub init_source: ::std::option::Option<unsafe extern "C" fn(cinfo: j_decompress_ptr)>,
    pub fill_input_buffer:
        ::std::option::Option<unsafe extern "C" fn(cinfo: j_decompress_ptr) -> boolean>,
    pub skip_input_data: ::std::option::Option<
        unsafe extern "C" fn(cinfo: j_decompress_ptr, num_bytes: ::std::os::raw::c_long),
    >,
    pub resync_to_restart: ::std::option::Option<
        unsafe extern "C" fn(cinfo: j_decompress_ptr, desired: ::std::os::raw::c_int) -> boolean,
    >,
    pub term_source: ::std::option::Option<unsafe extern "C" fn(cinfo: j_decompress_ptr)>,
}
#[test]
fn bindgen_test_layout_jpeg8_source_mgr() {
    assert_eq!(
        ::std::mem::size_of::<jpeg8_source_mgr>(),
        56usize,
        concat!("Size of: ", stringify!(jpeg8_source_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg8_source_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg8_source_mgr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_source_mgr>())).next_input_byte as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_source_mgr),
            "::",
            stringify!(next_input_byte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_source_mgr>())).bytes_in_buffer as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_source_mgr),
            "::",
            stringify!(bytes_in_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_source_mgr>())).init_source as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_source_mgr),
            "::",
            stringify!(init_source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_source_mgr>())).fill_input_buffer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_source_mgr),
            "::",
            stringify!(fill_input_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_source_mgr>())).skip_input_data as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_source_mgr),
            "::",
            stringify!(skip_input_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_source_mgr>())).resync_to_restart as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_source_mgr),
            "::",
            stringify!(resync_to_restart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_source_mgr>())).term_source as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_source_mgr),
            "::",
            stringify!(term_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvirt_sarray_control {
    _unused: [u8; 0],
}
pub type jvirt_sarray_ptr = *mut jvirt_sarray_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvirt_barray_control {
    _unused: [u8; 0],
}
pub type jvirt_barray_ptr = *mut jvirt_barray_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg8_memory_mgr {
    pub alloc_small: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            pool_id: ::std::os::raw::c_int,
            sizeofobject: size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub alloc_large: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            pool_id: ::std::os::raw::c_int,
            sizeofobject: size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub alloc_sarray: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            pool_id: ::std::os::raw::c_int,
            samplesperrow: JDIMENSION,
            numrows: JDIMENSION,
        ) -> JSAMPARRAY,
    >,
    pub alloc_barray: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            pool_id: ::std::os::raw::c_int,
            blocksperrow: JDIMENSION,
            numrows: JDIMENSION,
        ) -> JBLOCKARRAY,
    >,
    pub request_virt_sarray: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            pool_id: ::std::os::raw::c_int,
            pre_zero: boolean,
            samplesperrow: JDIMENSION,
            numrows: JDIMENSION,
            maxaccess: JDIMENSION,
        ) -> jvirt_sarray_ptr,
    >,
    pub request_virt_barray: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            pool_id: ::std::os::raw::c_int,
            pre_zero: boolean,
            blocksperrow: JDIMENSION,
            numrows: JDIMENSION,
            maxaccess: JDIMENSION,
        ) -> jvirt_barray_ptr,
    >,
    pub realize_virt_arrays: ::std::option::Option<unsafe extern "C" fn(cinfo: j_common_ptr)>,
    pub access_virt_sarray: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            ptr: jvirt_sarray_ptr,
            start_row: JDIMENSION,
            num_rows: JDIMENSION,
            writable: boolean,
        ) -> JSAMPARRAY,
    >,
    pub access_virt_barray: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            ptr: jvirt_barray_ptr,
            start_row: JDIMENSION,
            num_rows: JDIMENSION,
            writable: boolean,
        ) -> JBLOCKARRAY,
    >,
    pub free_pool: ::std::option::Option<
        unsafe extern "C" fn(cinfo: j_common_ptr, pool_id: ::std::os::raw::c_int),
    >,
    pub self_destruct: ::std::option::Option<unsafe extern "C" fn(cinfo: j_common_ptr)>,
    pub max_memory_to_use: ::std::os::raw::c_long,
    pub max_alloc_chunk: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_jpeg8_memory_mgr() {
    assert_eq!(
        ::std::mem::size_of::<jpeg8_memory_mgr>(),
        104usize,
        concat!("Size of: ", stringify!(jpeg8_memory_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg8_memory_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg8_memory_mgr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_memory_mgr>())).alloc_small as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_memory_mgr),
            "::",
            stringify!(alloc_small)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_memory_mgr>())).alloc_large as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_memory_mgr),
            "::",
            stringify!(alloc_large)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_memory_mgr>())).alloc_sarray as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_memory_mgr),
            "::",
            stringify!(alloc_sarray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_memory_mgr>())).alloc_barray as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_memory_mgr),
            "::",
            stringify!(alloc_barray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_memory_mgr>())).request_virt_sarray as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_memory_mgr),
            "::",
            stringify!(request_virt_sarray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_memory_mgr>())).request_virt_barray as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_memory_mgr),
            "::",
            stringify!(request_virt_barray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_memory_mgr>())).realize_virt_arrays as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_memory_mgr),
            "::",
            stringify!(realize_virt_arrays)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_memory_mgr>())).access_virt_sarray as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_memory_mgr),
            "::",
            stringify!(access_virt_sarray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_memory_mgr>())).access_virt_barray as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_memory_mgr),
            "::",
            stringify!(access_virt_barray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_memory_mgr>())).free_pool as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_memory_mgr),
            "::",
            stringify!(free_pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg8_memory_mgr>())).self_destruct as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_memory_mgr),
            "::",
            stringify!(self_destruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_memory_mgr>())).max_memory_to_use as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_memory_mgr),
            "::",
            stringify!(max_memory_to_use)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg8_memory_mgr>())).max_alloc_chunk as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg8_memory_mgr),
            "::",
            stringify!(max_alloc_chunk)
        )
    );
}
pub type jpeg_marker_parser_method =
    ::std::option::Option<unsafe extern "C" fn(cinfo: j_decompress_ptr) -> boolean>;
extern "C" {
    pub fn jpeg8_jpeg_std_error(err: *mut jpeg8_error_mgr) -> *mut jpeg8_error_mgr;
}
extern "C" {
    pub fn jpeg8_jpeg_CreateCompress(
        cinfo: j_compress_ptr,
        version: ::std::os::raw::c_int,
        structsize: size_t,
    );
}
extern "C" {
    pub fn jpeg8_jpeg_CreateDecompress(
        cinfo: j_decompress_ptr,
        version: ::std::os::raw::c_int,
        structsize: size_t,
    );
}
extern "C" {
    pub fn jpeg8_jpeg_destroy_compress(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_destroy_decompress(cinfo: j_decompress_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_stdio_dest(cinfo: j_compress_ptr, outfile: *mut FILE);
}
extern "C" {
    pub fn jpeg8_jpeg_stdio_src(cinfo: j_decompress_ptr, infile: *mut FILE);
}
extern "C" {
    pub fn jpeg8_jpeg_set_defaults(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_set_colorspace(cinfo: j_compress_ptr, colorspace: J_COLOR_SPACE);
}
extern "C" {
    pub fn jpeg8_jpeg_default_colorspace(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_set_quality(
        cinfo: j_compress_ptr,
        quality: ::std::os::raw::c_int,
        force_baseline: boolean,
    );
}
extern "C" {
    pub fn jpeg8_jpeg_set_linear_quality(
        cinfo: j_compress_ptr,
        scale_factor: ::std::os::raw::c_int,
        force_baseline: boolean,
    );
}
extern "C" {
    pub fn jpeg8_jpeg_add_quant_table(
        cinfo: j_compress_ptr,
        which_tbl: ::std::os::raw::c_int,
        basic_table: *const ::std::os::raw::c_uint,
        scale_factor: ::std::os::raw::c_int,
        force_baseline: boolean,
    );
}
extern "C" {
    pub fn jpeg8_jpeg_quality_scaling(quality: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jpeg8_jpeg_simple_lossless(
        cinfo: j_compress_ptr,
        predictor: ::std::os::raw::c_int,
        point_transform: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jpeg8_jpeg_simple_progression(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_suppress_tables(cinfo: j_compress_ptr, suppress: boolean);
}
extern "C" {
    pub fn jpeg8_jpeg_alloc_quant_table(cinfo: j_common_ptr) -> *mut JQUANT_TBL;
}
extern "C" {
    pub fn jpeg8_jpeg_alloc_huff_table(cinfo: j_common_ptr) -> *mut JHUFF_TBL;
}
extern "C" {
    pub fn jpeg8_jpeg_start_compress(cinfo: j_compress_ptr, write_all_tables: boolean);
}
extern "C" {
    pub fn jpeg8_jpeg_write_scanlines(
        cinfo: j_compress_ptr,
        scanlines: JSAMPARRAY,
        num_lines: JDIMENSION,
    ) -> JDIMENSION;
}
extern "C" {
    pub fn jpeg8_jpeg_finish_compress(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_write_raw_data(
        cinfo: j_compress_ptr,
        data: JSAMPIMAGE,
        num_lines: JDIMENSION,
    ) -> JDIMENSION;
}
extern "C" {
    pub fn jpeg8_jpeg_write_marker(
        cinfo: j_compress_ptr,
        marker: ::std::os::raw::c_int,
        dataptr: *const JOCTET,
        datalen: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn jpeg8_jpeg_write_m_header(
        cinfo: j_compress_ptr,
        marker: ::std::os::raw::c_int,
        datalen: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn jpeg8_jpeg_write_m_byte(cinfo: j_compress_ptr, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jpeg8_jpeg_write_tables(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_read_header(
        cinfo: j_decompress_ptr,
        require_image: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jpeg8_jpeg_start_decompress(cinfo: j_decompress_ptr) -> boolean;
}
extern "C" {
    pub fn jpeg8_jpeg_read_scanlines(
        cinfo: j_decompress_ptr,
        scanlines: JSAMPARRAY,
        max_lines: JDIMENSION,
    ) -> JDIMENSION;
}
extern "C" {
    pub fn jpeg8_jpeg_finish_decompress(cinfo: j_decompress_ptr) -> boolean;
}
extern "C" {
    pub fn jpeg8_jpeg_read_raw_data(
        cinfo: j_decompress_ptr,
        data: JSAMPIMAGE,
        max_lines: JDIMENSION,
    ) -> JDIMENSION;
}
extern "C" {
    pub fn jpeg8_jpeg_has_multiple_scans(cinfo: j_decompress_ptr) -> boolean;
}
extern "C" {
    pub fn jpeg8_jpeg_start_output(
        cinfo: j_decompress_ptr,
        scan_number: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn jpeg8_jpeg_finish_output(cinfo: j_decompress_ptr) -> boolean;
}
extern "C" {
    pub fn jpeg8_jpeg_input_complete(cinfo: j_decompress_ptr) -> boolean;
}
extern "C" {
    pub fn jpeg8_jpeg_new_colormap(cinfo: j_decompress_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_consume_input(cinfo: j_decompress_ptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jpeg8_jpeg_calc_output_dimensions(cinfo: j_decompress_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_save_markers(
        cinfo: j_decompress_ptr,
        marker_code: ::std::os::raw::c_int,
        length_limit: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn jpeg8_jpeg_set_marker_processor(
        cinfo: j_decompress_ptr,
        marker_code: ::std::os::raw::c_int,
        routine: jpeg_marker_parser_method,
    );
}
extern "C" {
    pub fn jpeg8_jpeg_read_coefficients(cinfo: j_decompress_ptr) -> *mut jvirt_barray_ptr;
}
extern "C" {
    pub fn jpeg8_jpeg_write_coefficients(cinfo: j_compress_ptr, coef_arrays: *mut jvirt_barray_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_copy_critical_parameters(srcinfo: j_decompress_ptr, dstinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_abort_compress(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_abort_decompress(cinfo: j_decompress_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_abort(cinfo: j_common_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_destroy(cinfo: j_common_ptr);
}
extern "C" {
    pub fn jpeg8_jpeg_resync_to_restart(
        cinfo: j_decompress_ptr,
        desired: ::std::os::raw::c_int,
    ) -> boolean;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_comp_master {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_c_main_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_c_prep_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_c_codec {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_marker_writer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_color_converter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_downsampler {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_decomp_master {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_d_main_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_d_codec {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_d_post_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_input_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_marker_reader {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_upsampler {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_color_deconverter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_color_quantizer {
    pub _address: u8,
}
